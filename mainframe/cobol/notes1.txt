COBOL
GRACE HOPPER (CREATOR)

HAS 4 DIVISIONS
IDENTIFICATION
ENVIRONMENT
DATA 
PROCEDURE

IDENTIFICATION DIVISION
Contains the program name, author, date written and other information
ENVIRONMENT DIVISION
Describes computer hardware and external file information
DATA DIVISION
Provides detailed descriptions of input, output and work files.
PROCEDURE DIVISION
Contains the logical instructions.

IDENTIFICATION DIVISION.
PROGRAM-ID. 	EMPLOY54.
AUTHOR.			EMILYN JUSTUS.
INSTALLATION.	NEW HAMPSHIRE.
DATE-WRITTEN.	JANUARY 12,2021.
DATE-COMPILED.	
SECURITY.		UNCLASSIFIED.

ENVIRONMENT 		DIVISION.
CONFIGURATION 		SECTION.
SOURCE-COMPUTER.	IBM-370.
OBJECT-COMPUTER.	IBM-370.
INPUT-OUTPUT		SECTION.
FILE-CRONTROL.
SELECT EMPLOYEE-FILE-IN ASSIGN TO EMPIN.
SELECT REPORT1-FILE-OUT ASSIGN TO REPORT1-FILE-OUT
		FILE STATUS IS REPORT1-STATUS-CODE.

DATA DIVISION.
FILE SECTION.
FD EMPLOYEE-FILE-IN
 LABEL RECORDS ARE STANDARD
 RECORDING MODE IS F
 RECORD CONTAINS 100 CHARACTERS
 BLOCK CONTAINS 0 RECORDS
 DATA RECORD IS EMPLOYEE-RECORD.
01 EMPLOYEE-RECORD PICTURE X(100).
WORKING-STORAGE SECTION.
01 END-OF-FILE-SWITCH PICTURE X VALUE 'N'.
01 PRINT-TALLY.
   05 LINE-COUNTER	PICTURE 9(2) VALUE 99.
   05 PAGE-COUNTER	PICTURE 9(4) VALUE 0.
   05 LINES-PER-PAGE	PICTURE 9(2) VALUE 48.
01 W-REPOUT-STATUS-CODE PIC X(2) VALUE '00'.
LINKAGE SECTION.
01 LINKAGE-PARM.
 05 LINKAGE-PARM-LENGHT PIC S9(4) COMP.
 05 LINKAGE-PARM-DATA	PIC X(80).
 
COBOL STRUCTURE - COLUMNS
COLUMN RULES:
COLUMNS 1-6: 	SEQUENCE NUMBERS (OPTIONAL)
COLUMN	7:		COMMENT/CONTINUATION/FORM FEED
COLUMNS 8-11:	DIVISION AND SECTION HEADINGS, PARAGRAPH NAMES, LEVEL DEFINITIONS OF 01 OR 77,
				AND FILE DESCRIPTIONS (FD)
COLUMNS 12-72:	Data definitions (not 01 or 77) and verbs
COLUMNS 73-80:	Identification Columns (e.g. nbame of program).

COBOL LIFE CICLE:
COBOL SOURCE CODE => OBJECT CODE => EXECUTABLE CODE

JCL
===
//COMPILE EXEC OIGYWCL, PARM='SOURCE,XREF,MAP'
//SYSIN DD DSN=IBM1.SAMPLE.COBOL(OLIVIA2)
//LKED.SYSLMOD DD DSN=IBM1.SAMPLE.LOAD(RALANNA3)

RETURN CODE		MESSAGE CODE		DESCRIPTION
0				Informational		Means there are zero errors
4				Warning				Syntax correct, but execution error might occur
8				Error				Compiler will try to fix the error;
									Program may or many not run properly
12				Severe				Compiler will try to fix the error, but it is likely the
									program probably will not run properly
16				Unrecoverable		The error too great for the compiler to continue

COBOL allows a WORD to use up to 30 characters
WORD is used to identify file, procedure, data variables.

CLAUSE
Specifies attributes of a field. Field attributes store numbers, names, town cities as well as other things
EXAMPLES
EMPLOYEE-ADDRESS PICTURE X(42)
CURRENT-BALANCE VALUE 77.50
EMPLOYEE-CITY VALUE "MANSFIELD CONNECTICUT"

ENTRY
is a series of clauses that end with a period as delimiter

01 EMPLOYEE-NUMBER 		PIC 9(3)		VALUE 980.
01 EMPLOYEE-NAMES		PIC X(4)	VALUE 'LYNN'.


CHARACTERS MAKE => WORDS THAT ARE USED IN => CLAUSES TO FINISH => ENTRIES

NUMBERS:
- DECIMAL
- BINARY
- HEXADECIMAL

FILE, RECORD, FIELD
A FILE is a group of related records.
A RECORD is a group of related fields (bits of information).
A FIELD is a portion of the record that contains a meaningful unit or fact.

FD = FILE DESCRIPTION AREA

FD EMPLOYEE-IN
   RECORDING MODE IS F
   RECORD CONTAINS 100 CHARACTERS
   BLOCK CONTAINS 0 RECORDS
   DATA RECORD IS EMPLOYEE-RECORD.

MODES:
V VARIABLE
F FIXED

LEVEL NUMBERS:
01		Record description and independent data fields
02-48	Fields within records and subordinate items
66		RENAMES clause
77 		Individual elementary items
88		Condition names or valid values


PICTURE CLAUSE:
A		Any alphabetic character (A to Z plus a blank character)
9		Any numeric digit (0-9)
X		alphanumeric: any character from the character set (letters, numbers, blanks, special characters)
V		Implied decimal point; can only appear once
S		the presence of a sign with numeric data; can only appear once and at the beginning of a picture.

        01	EMPLOYEE-INFORMATION.
			05 EMPLOYEE-NUMBER		PICTURE 9(10).
			05 NAMES				PIC X(25).
			05 TELEPHONE.
				10 AREA-CODE		PIC 9(3).
				10 EXCHANGE			PIC 9(3).
				10 EXTENTION		PIC 9(4).
			05 SALARY-AMOUNT		PIC S9(5)V99.
*****************************************************************************
*FIGURATIVE	 *...IS USED WITH...     	*...TO CAUSE THIS RESULT!			*
*CONSTANT    *							*									*
*****************************************************************************
*LOW-VALUES	 	ALPHANUMERIC(PIC X)			1 to n of the lowest value (x'00') 
*			 								in the collating sequence          
*****************************************************************************
*HIGH-VALUES 		ALPHANUMERIC(PIC X)	 	1 to n of the highest value       
*			 							 	(x'FF') in the collating sequence 
*****************************************************************************
*SPACES			ALPHABETIC (PIC A) or		1 to n blanks (x'40')
*				ALPHANUMERIC (PIC X)
*****************************************************************************
*QUOTES			ALPHANUMERIC(PIC X)			1 to n quote marks or
*****************************************************************************
*ZEROES			ALPHANUMERIC (PIC X) or		1 to n zeroes
*				NUMERIC (PIC 9)
*****************************************************************************
*ALL x			ALPHANUMERIC (PIC X)		1 to n of a non-numeric literal
*****************************************************************************


USAGE CLAUSE		EXPLANATION
DISPLAY				One character per byte; The default USAGE.
BINARY				Also known as COMPUTATIONAL or COMP
COMPUTATIONAL-1		Short precision floating point - can be 
					abbreviated COMP-1
COMPUTATIONAL-2		Long precision floating point - can be
					abbreviated COMP-2
PACKED-DECIMAL		Packed decimal format - can be abbreviated COMP-3
COMP-5				Binary with a higher capacity.
INDEX				For table handling

The procedure division consists of comments, statements, sentences, scope terminators, paragraphs
and sections.

Example:

*This program processes data form February
	MOVE INPUT-RECORD TO OUTPUT-RECORD
	IF INPUT-MONTH = 'FEBRUARY'
		PERFORM FEBRUARY-PROCESS
	END-IF

       ***this example will work (using a period) ***
			ADD + 1 TO TOTAL-COUNTER.
	   ***this will also work (using a scope terminator) ***
			ADD + 1 TO TOTAL-COUNTER
			END-ADD

SCOPE TERMINATOR = END
END-ADD		END-SUBTRACT	END-COMPUTE		END-DELETE
END-DIVIDE	END-READ		END-CALL		END-WRITE

PARAGRAPHS
A paragraph is one or more logically relatad sentences

MAIN.
	OPEN INPUT IN-EMPLOYEES
		OUTPUT OUT-REPORT
	PERFORM PAY-THE-EMPLOYEES
		UNTIL SWITCH-FOR-EMPLOYEES-EOF
	CLOSE IN-EMPLOYEES, OUT-REPORT
	COMPUTE TOTAL = NUMBER-IN + NUMBER-OUT
	END-COMPUTE
	MOVE +0 TO RETURN-CODE
	GOBACK
	.
	
SECTIONS:
Like paragraphs, a section is one or more logically related sentences physically grouped together.
It begins with a header in the A margin, followed by section and a period.

	PROGRAM
		|
	DIVISIONS
		|
	SECTIONS
		|
	PARAGRAPHS
		|
	SENTENCES
		|
	STATEMENTS
		|
	RESERVED WORDS / USER DEFINED WORDS
		|
	CHARACTERS

THE INITIALIZED COMMAND
Initialize is one of the commands that places a value in working storage data fields
Initialize cannot be used for files in the linkage section.

Example:
       WORKING-STORAGE SECTION.
	  01 WORK-AREA.
	    05 PART-REQUESTED 	PIC X(20).
		05 PRICE-QUOTED		PIC S9(5)V99 COMP-3
	  01 COUNTERS.
		05 COUNTER-1		PIC S9(4) COMP.
		05 COUNTER-2		PIC S9(4) COMP.
	  PROCEDURE DIVISION.
	  *........................
	  INITIALIZE WORK-AREA
	  INITIALIZE COUNTER-2 REPLACING NUMERIC BY 1

INPUT/OUTPUT COMMANDS
- OPEN
- READ
- CLOSE
- WRITE

OPEN INPUT 	MASTER-FILE
			MONTHLY-FILE.
OPEN OUTPUT	OUT-FILE
END-OPEN

CLOSE 	MASTER-FILE
		MONTHLY-FILE.
CLOSE 	SALES
		CONTROL-FILE
		REPORT
		AUDIT-FILE
END-CLOSE

The read command retrieves one record at a time from an external
file and stores it in a data record underneath the file description or FD entry

AT END => When file has not mor records

WRITE COMMAND
Is the opposite to read, sends a record in the FD to the external file

Example:

WRITE EMPLOYEE-RECORD
END-WRITE

I/O STATEMENTS
ACCEPT 
DISPLAY

INTRINSIC FUNCTION: CURRENT DATE

GOBACK AND STOP RUN COMMANDS.

DATE is 6 digit
DAY is 5 digits
TIME is 8 digits

INPUTS AND OUTPUTS:
- System input device (SYSIN)
- External card reader
- Console

ACCEPT COMMAND: Accepts value from the JCL or a system defined value (input)

EXAMPLE OF ACCEPT COMMAND:
       WORKING-STORAGE SECTION.
	   
	   01 RUN-DATE.
		05 CUR-YY		PIC 9(2).
		05 CUR-MM		PIC 9(2).
		05 CUR-DD		PIC 9(2).
	   
	   01 WS-JULIAN-DAY.
	    05 WS-JUL-YY	PIC 9(2).
		05 WS-JUL-DAY	PIC 9(3).
		
	   PROCEDURE DIVISION.
	   ACCEPT RUN-DATE 		FROM DATE.
	   ACCEPT JULIAN-DAY	FROM DAY.

Example 2:

      05 DAY-NAME 	PIC X(9).
	  05 DAY-NUMBER PIC 9(1).
	  
	  ACCEPT DAY-NUMBER FROM DAY-OF-WEEK.
	  EVALUATE DAY-NUMBER
	    WHEN 1 MOVE "MONDAY"	TO DAY-NAME
		WHEN 2 MOVE "TUESDAY"	TO DAY-NAME
		WHEN 3 MOVE "WEDNESDAY"	TO DAY-NAME
		WHEN 4 MOVE "THURSDAY"	TO DAY-NAME
		WHEN 5 MOVE "FRIDAY"	TO DAY-NAME
		WHEN 6 MOVE "SATURDAY"	TO DAY-NAME
		WHEN 7 MOVE "SUNDAY"	TO DAY-NAME
      END-EVALUATE

Example CURRENT-DATE

       01 MY-CURRENT-DATE.
	     05 WW-CURR-DATE.
		   10 WW-CURRENT-YEAR		PIC 9(4).
		   10 WW-CURRENT-MONTH		PIC 9(2).
		   10 WW-CURRENT-DAY		PIC 9(2).
		 05 WW-CURRENT-TIME.
		   10 WW-CURRENT-HOUR		PIC 9(2).
		   10 WW-CURRENT-MINUTE		PIC 9(2).
		   10 WW-CURRENT-SECOND		PIC 9(2).
		   10 WW-CURRENT-HUNSEC		PIC 9(2).
		 05 WW-DIFF-FROM-GMT		PIC 9(5).
	   MOVE FUNCTION CURRENT-DATE
	   TO MY-CURRENT-DATE

COBOL ARITHMETIC
ADD, SUBTRACT MULTIPLY DIVIDE, COMPUTE (EXPONENTS)

18 DIGITS



TWO OPTIONS: ROUNDED or ON SIZE ERROR



https://login.ibm.com/authsvc/mtfim/sps/authsvc?PolicyId=urn:ibm:security:authentication:asf:basicldapuser&Target=https%3A%2F%2Flogin.ibm.com%2Foidc%2Fendpoint%2Fdefault%2Fauthorize%3FqsId%3Dfacf2ec1-5cdd-4e08-8b79-bc15700177b9%26client_id%3DNTQ2ZDFhNDQtMGVjMS00

ADD TO (a numeric field)
ADD GIVING (a numeric file)

Examples:
ADD A-NUMBER			TO 			B-NUMBER
ADD A-NUMBER, B-NUMBER	GIVING		C-NUMBER
ADD 57					TO			EMPLOYEE-BONUS
ADD EMPLOYEE-BONUS		TO			TOTAL-AMOUNT ROUNDED
ADD A-NUMBER 			TO			TOTAL-AMOUNT ROUNDED
ADD A-NUMBER TO TOTAL-AMOUNT
 ON SIZE ERROR
	PERFORM 800-CALL-TREASURER
 NOT ON SIZE ERROR
	PERFORM 900-SUCESSFUL-CALCULATION
END-ADD

SUBTRACT EXAMPLES:

SUBTRACT A-COST,B-COST FROM C-COST.

SUBTRACT A-COST,B-COST FROM C-COST.

SUBTRACT FOOD,DRINK,DESSERT
 FROM MY-WALLET GIVING AMOUNT-LEFT.

SUBTRACT COSTS FROM SAVINGS GIVING AMOUNT
     ON SIZE ERROR PERFORM NO-MONEY-LEFT
END-SUBTRACT


MULTIPLY:

MULTIPLY EMPLOYEE-WAGE BY 2 GIVING RAISE

MULTIPLY 1.07 BY INVESTMENT

MULTIPLY MY-DEBT BY BANK-RATE GIVING NEW-DEBT
   ON SIZE ERROR
      PERFORM WAY-TOO-MUCH
   NOT ON SIZE ERROR
      PERFORM ITS-GETTING-BETTER
END-MULTIPLY

DIVIDE EXAMPLES:

DIVIDE NUMBER1 INTO NUMBER2.
DIVIDE AMOUNT-1 INTO AMOUNT-2 GIVING AMOUNT-3

COMPUTE EXAMPLES:

COMPUTE COUNTER1 = 900
COMPUTE TOTAL-CTR = A1 + B1 + C1
COMPUTE TOTAL-1 = 2**5
COMPUTE TOTAL-2 = (4 + 10/100) ** 5
COMPUTE COUNTER1 = COUNTER1 * 1.20
  ON SIZE ERROR PERFORM COUNTER-OVERFLOW
END-COMPUTE

SEQUENCE:
1ST = ()	PARENTHESIS
2ND = ** 	EXPONENTIATION
3RD = / *	DIVISION OR MULTIPLICATION
4TH	= + -	ADD OR SUBTRACT

BEAUTIFUL NUMBERS:
Insertion Editing = (character(s) are added to the field)
 - Simple insertion
 - Special insertion
 - Fixed insertion
 - Floating insertion
 
Suppression and replacement editing: (leading zeroes are replaced)
 - Zero suppression and replacement with asterisks
 - Zero suppression and replacement with spaces
 
Example: convert 8004284919 to 800 428 4919

Numeric Display Field:
	INPUT-1 PICTURE 9(10) VALUE 8004284919.
Numeric Edited Field:
	RECEIVER-1 PICTURE 999B999B9999.

    MOVE INPUT-1 TO RECEIVER-1 

The result is: 800 428 4919

The rules for the CR and DB sign
CR (credit)- when number is positive, 2 spaces appear
			 when number is negative, CR appears
			 
DB (debit)- When number is positive, 2 spaces appear
			When number is negative, DB appears
			
EXAMPLE:
       INPUT-1		PIC 9(3)		VALUE +246
	   RECEIVER-2	PIC $9(5)CR.
	   RECEIVER-3	PIC $9(5)DB.
	   RECEIVER-4 	PIC +$9(3).99.
	  MOVE INPUT-1 TO RECEIVER-2, RECEIVER-3, RECEIVER-4.
	
Results:
RECEIVER-2 	PIC $9(5)CR.	$00246CR
RECEIVER-3	PIC $9(5)DB.	$00246DB
RECEIVER-4 	PIC +$9(3).99.	_$246.00

http://www.simotime.com/vsmfsk01.htm

IBM COBOL Basics
https://coursera.org/verify/WUQP32WTKSXT

https://www.tonymarston.net/cobol/cobolstandards.html


